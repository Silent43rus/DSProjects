# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CV_test1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import pandas as pd
from tensorflow import keras
from skimage.io import imread
from skimage.transform  import resize

import numpy as np

from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *

import cv2

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(290, 386)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QRect(10, 280, 251, 23))
        self.pushButton.setObjectName("pushButton")
        self.label1 = QLabel(self.centralwidget)
        self.label1.setGeometry(QRect(10, 80, 256, 192))
        self.label1.setObjectName("label1")
        self.label1.setAlignment(Qt.AlignCenter)
        self.label1.setScaledContents(True)
        self.pushButton_2 = QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QRect(80, 50, 111, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_2 = QLabel(self.centralwidget)
        self.label_2.setGeometry(QRect(20, 320, 201, 16))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setGeometry(QRect(0, 0, 290, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.comboBox = QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QRect(40, 30, 201, 20))
        self.comboBox.setObjectName(u"comboBox")
        self.comboBox.addItem("Вкл видео")
        self.comboBox.addItem("Загрузка изображения")


        self.retranslateUi(MainWindow)
        QMetaObject.connectSlotsByName(MainWindow)

        self.add_function()
        self.Flag = False
        self.path = ''

    def retranslateUi(self, MainWindow):
        _translate = QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Распознавание изображений"))
        self.pushButton.setText(_translate("MainWindow", "Распознать изображение"))
        self.pushButton_2.setText(_translate("MainWindow", "Включить камеру"))
        self.label_2.setText(_translate("MainWindow", "На изображении:"))


    def add_function(self):
        self.pushButton_2.clicked.connect(self.write_image)
        self.pushButton.clicked.connect(self.what_is_it)

    def write_image(self):
        try:
            if self.comboBox.currentIndex() == 1:
                fname = QFileDialog.getOpenFileName(self.centralwidget, "Open File", "D:/ashikh/work/CV",
                                                    "All File (*);; PNG File (*.png);; JPG Files (*.jpg)")
                a = QPixmap(fname[0])
                self.label1.setPixmap(a)
                self.path = fname[0]
            elif self.comboBox.currentIndex() == 0:
                path = "D:/ashikh/work/TASK-OTHER-CV/Quantorium/Monitor"
                self.Flag = False
                cap = cv2.VideoCapture(0)
                model = keras.models.load_model("D:/ashikh/work/TASK-OTHER-CV/models/animal_classifer_v4")

                while True:
                    ret, img = cap.read()
                    cv2.imwrite('cam.png', img)
                    a = QPixmap('cam.png')
                    self.label1.setPixmap(a)
                    k = cv2.waitKey(30) & 0xFF
                    if self.Flag:
                        break

                im = img
                cap.release()
                cv2.destroyAllWindows()

                im = resize(im, (200,200))
                x = np.expand_dims(im, axis=0)
                p = model.predict(x)

                maxx = p[0][0]
                maxx_i = 0
                for i in range(1, 3):
                    if p[0][i] > maxx:
                        maxx = p[0][i]
                        maxx_i = i
                iden = ['Keyboard', 'Monitor', 'PC_Mouse']
                idx = iden[maxx_i]
                self.label_2.setText("На изображении: " + str(iden[maxx_i]))

        except Exception as ex:
            print(ex)


    def what_is_it(self):
        try:
            if self.comboBox.currentIndex() == 1:
                img_path = self.path
                model = keras.models.load_model("D:/ashikh/work/TASK-OTHER-CV/models/animal_classifer_v4")
                im = imread(img_path)
                im = resize(im, (200, 200))
                x = np.expand_dims(im, axis=0)
                p = model.predict(x)
                maxx = p[0][0]
                maxx_i = 0
                for i in range(1, 3):
                    if p[0][i] > maxx:
                        maxx = p[0][i]
                        maxx_i = i
                iden = ['Keyboard', 'Monitor', 'PC_Mouse']
                self.label_2.setText("На изображении: " + iden[maxx_i])
            elif self.comboBox.currentIndex() == 0:
                self.Flag = True
        except Exception as ex:
            print(ex)



if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit((app.exec_()))
